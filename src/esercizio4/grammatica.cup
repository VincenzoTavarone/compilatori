package esercizio4;
import java_cup.runtime.*;

parser code {:
	Scanner scanner;
	GrammaticaCup(Scanner s, String c){ super(s); this.scanner = s;}
:};


scan with {:
	Symbol next = scanner.next_token();
	System.out.println(Wrapper.getClassName(next.sym));
	return next;
:};

/*Terminali*/
terminal String    	LPAR, RPAR, MINUS, PROGRAM, IDENTIFIER, INSTRUCTION_SEPARATOR, END_PROGRAM, VAR, PROCEDURE, 
					INTEGER, BOOLEAN, BEGIN, WRITE, READ, IF, THEN, WHILE, DO, END, ASSIGN, RELATIONAL_OPERATOR, ADDING_OPERATOR, 
					MULTIPLYING_OPERATOR, NOT, TRUE, FALSE, SEPARATOR, ELSE, INTEGER_CONSTANT, STRING_CONSTANT, CHARACTER_CONSTANT;

/*Non Terminali*/
nonterminal			program_nt, block, variable_declaration_part, procedure_declaration_part, statement_part, variable_declaration,
					procedure_declaration, simple_block, compound_statement, statement, simple_statement, structured_statement, assignment_statement,
					read_statement, procedure_statement, write_statement, expression, output_value, if_statement, while_statement, simple_expression;

/*Non Terminali di supporto */
nonterminal			variable_declaration_list, separator_identifier, instruction_separator_statement, separator_input_variable, separator_output_value, adding_operator;
			
nonterminal String	constant_identifier, constant, variable_identifier, variable, procedure_identifier, simple_type, input_variable;

/*Precendenze*/
precedence left ADDING_OPERATOR;
precedence left MULTIPLYING_OPERATOR;
precedence left ASSIGN, READ, WRITE;
precedence left ELSE;
precedence left RELATIONAL_OPERATOR;
precedence right MINUS;

program_nt ::=	PROGRAM IDENTIFIER INSTRUCTION_SEPARATOR block END_PROGRAM
				;
				
block ::=	variable_declaration_part procedure_declaration_part statement_part 
			;

variable_declaration_part ::=	VAR variable_declaration INSTRUCTION_SEPARATOR variable_declaration_list
								|
								/* epsilon */
								;
								
variable_declaration_list ::=	variable_declaration INSTRUCTION_SEPARATOR variable_declaration_list
								|
								/* epsilon */
								;

variable_declaration ::=	IDENTIFIER separator_identifier simple_type
							;
							
separator_identifier ::=	SEPARATOR IDENTIFIER separator_identifier
							|
							/* epsilon */
							;

simple_type ::=	INTEGER | BOOLEAN ;

procedure_declaration_part ::=	procedure_declaration INSTRUCTION_SEPARATOR procedure_declaration_part
								|
								/* epsilon */
								;

procedure_declaration ::=	PROCEDURE IDENTIFIER INSTRUCTION_SEPARATOR simple_block
							;
							
simple_block ::=	variable_declaration_part statement_part ;

statement_part ::=	compound_statement ;

compound_statement ::=	BEGIN statement instruction_separator_statement END
						;
						
instruction_separator_statement ::=	INSTRUCTION_SEPARATOR statement instruction_separator_statement
									|
									/* epsilon */
									;
									
statement ::=	simple_statement | structured_statement ;

simple_statement ::=	assignment_statement | read_statement | procedure_statement | write_statement ;

assignment_statement ::=	variable ASSIGN expression ;

read_statement ::=	READ LPAR input_variable separator_input_variable RPAR ;

separator_input_variable ::=	SEPARATOR input_variable separator_input_variable
								|
								/* epsilon */
								;
								
input_variable ::= variable ;

procedure_statement ::= procedure_identifier ;

procedure_identifier ::= IDENTIFIER ;

write_statement ::= WRITE LPAR output_value separator_output_value RPAR ;

separator_output_value ::=	SEPARATOR output_value separator_output_value
							|
							/* epsilon */
							;

output_value ::= expression ;

structured_statement ::= compound_statement | if_statement | while_statement ;

if_statement ::=	IF expression THEN statement
					|
					IF expression THEN statement ELSE statement %prec ELSE
					;
					
while_statement ::=	WHILE expression DO statement ;

expression ::=	simple_expression
				|
				simple_expression RELATIONAL_OPERATOR simple_expression
				;
				
simple_expression ::=	simple_expression adding_operator simple_expression
						|
						simple_expression MULTIPLYING_OPERATOR simple_expression
						|
						variable
						|
						constant
						|
						LPAR expression RPAR
						|
						NOT expression
						|
						MINUS simple_expression %prec MINUS
						;
						
adding_operator ::=	ADDING_OPERATOR
					|
					MINUS
					;
						
variable ::= variable_identifier ;

variable_identifier ::= IDENTIFIER ;

constant ::= INTEGER_CONSTANT | STRING_CONSTANT | CHARACTER_CONSTANT | constant_identifier ;

constant_identifier ::= TRUE | FALSE ;
