//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 04 23:23:20 CEST 2017
//----------------------------------------------------

package esercizio4;

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Mon Sep 04 23:23:20 CEST 2017
 */
public class GrammaticaCup extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public GrammaticaCup() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public GrammaticaCup(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public GrammaticaCup(java_cup.runtime.Scanner s,
			java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\074\000\002\002\007\000\002\002\004\000\002\003"
			+ "\005\000\002\004\006\000\002\004\002\000\002\027\005"
			+ "\000\002\027\002\000\002\007\005\000\002\030\005\000"
			+ "\002\030\002\000\002\041\003\000\002\041\003\000\002"
			+ "\005\005\000\002\005\002\000\002\010\006\000\002\011"
			+ "\004\000\002\006\003\000\002\012\006\000\002\031\005"
			+ "\000\002\031\002\000\002\013\003\000\002\013\003\000"
			+ "\002\014\003\000\002\014\003\000\002\014\003\000\002"
			+ "\014\003\000\002\016\005\000\002\017\007\000\002\032"
			+ "\005\000\002\032\002\000\002\042\003\000\002\020\003"
			+ "\000\002\040\003\000\002\021\007\000\002\033\005\000"
			+ "\002\033\002\000\002\023\003\000\002\015\003\000\002"
			+ "\015\003\000\002\015\003\000\002\024\006\000\002\024"
			+ "\010\000\002\025\006\000\002\022\003\000\002\022\005"
			+ "\000\002\026\005\000\002\026\005\000\002\026\003\000"
			+ "\002\026\003\000\002\026\005\000\002\026\004\000\002"
			+ "\026\004\000\002\037\003\000\002\036\003\000\002\035"
			+ "\003\000\002\035\003\000\002\035\003\000\002\035\003"
			+ "\000\002\034\003\000\002\034\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\155\000\004\007\005\001\002\000\004\002\157\001"
			+ "\002\000\004\010\006\001\002\000\004\011\007\001\002"
			+ "\000\010\013\010\014\ufffd\017\ufffd\001\002\000\004\010"
			+ "\141\001\002\000\006\014\014\017\ufff4\001\002\000\004"
			+ "\012\013\001\002\000\004\002\001\001\002\000\004\010"
			+ "\134\001\002\000\004\011\132\001\002\000\004\017\017"
			+ "\001\002\000\016\010\031\017\017\020\035\021\022\022"
			+ "\033\024\026\001\002\000\004\012\ufff1\001\002\000\004"
			+ "\012\uffff\001\002\000\004\004\122\001\002\000\010\011"
			+ "\uffec\026\uffec\037\uffec\001\002\000\006\011\115\026\uffee"
			+ "\001\002\000\010\011\uffdb\026\uffdb\037\uffdb\001\002\000"
			+ "\024\004\051\006\055\010\061\033\062\034\050\035\054"
			+ "\040\052\041\046\042\045\001\002\000\030\005\uffcd\011"
			+ "\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd"
			+ "\032\uffcd\036\uffcd\037\uffcd\001\002\000\010\011\uffda\026"
			+ "\uffda\037\uffda\001\002\000\012\011\uffe1\026\uffe1\027\uffcc"
			+ "\037\uffe1\001\002\000\010\011\uffeb\026\uffeb\037\uffeb\001"
			+ "\002\000\024\004\051\006\055\010\061\033\062\034\050"
			+ "\035\054\040\052\041\046\042\045\001\002\000\010\011"
			+ "\uffdc\026\uffdc\037\uffdc\001\002\000\004\004\075\001\002"
			+ "\000\010\011\uffe9\026\uffe9\037\uffe9\001\002\000\010\011"
			+ "\uffe8\026\uffe8\037\uffe8\001\002\000\010\011\uffea\026\uffea"
			+ "\037\uffea\001\002\000\004\027\044\001\002\000\010\011"
			+ "\uffed\026\uffed\037\uffed\001\002\000\010\011\uffe2\026\uffe2"
			+ "\037\uffe2\001\002\000\024\004\051\006\055\010\061\033"
			+ "\062\034\050\035\054\040\052\041\046\042\045\001\002"
			+ "\000\026\005\uffc9\011\uffc9\023\uffc9\025\uffc9\026\uffc9\030"
			+ "\uffc9\031\uffc9\032\uffc9\036\uffc9\037\uffc9\001\002\000\026"
			+ "\005\uffca\011\uffca\023\uffca\025\uffca\026\uffca\030\uffca\031"
			+ "\uffca\032\uffca\036\uffca\037\uffca\001\002\000\026\005\uffd2"
			+ "\011\uffd2\023\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032"
			+ "\uffd2\036\uffd2\037\uffd2\001\002\000\026\005\uffc7\011\uffc7"
			+ "\023\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\036"
			+ "\uffc7\037\uffc7\001\002\000\024\004\051\006\055\010\061"
			+ "\033\062\034\050\035\054\040\052\041\046\042\045\001"
			+ "\002\000\026\005\uffcb\011\uffcb\023\uffcb\025\uffcb\026\uffcb"
			+ "\030\uffcb\031\uffcb\032\uffcb\036\uffcb\037\uffcb\001\002\000"
			+ "\026\005\uffc8\011\uffc8\023\uffc8\025\uffc8\026\uffc8\030\uffc8"
			+ "\031\uffc8\032\uffc8\036\uffc8\037\uffc8\001\002\000\026\005"
			+ "\uffc6\011\uffc6\023\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6"
			+ "\032\uffc6\036\uffc6\037\uffc6\001\002\000\024\004\051\006"
			+ "\055\010\061\033\062\034\050\035\054\040\052\041\046"
			+ "\042\045\001\002\000\010\011\uffe7\026\uffe7\037\uffe7\001"
			+ "\002\000\026\005\uffd6\011\uffd6\023\uffd6\025\uffd6\026\uffd6"
			+ "\030\066\031\065\032\064\036\uffd6\037\uffd6\001\002\000"
			+ "\026\005\uffd1\011\uffd1\023\uffd1\025\uffd1\026\uffd1\030\uffd1"
			+ "\031\uffd1\032\uffd1\036\uffd1\037\uffd1\001\002\000\026\005"
			+ "\uffcc\011\uffcc\023\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc"
			+ "\032\uffcc\036\uffcc\037\uffcc\001\002\000\024\004\051\006"
			+ "\055\010\061\033\062\034\050\035\054\040\052\041\046"
			+ "\042\045\001\002\000\026\005\uffcf\011\uffcf\023\uffcf\025"
			+ "\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\036\uffcf\037\uffcf"
			+ "\001\002\000\024\004\051\006\055\010\061\033\062\034"
			+ "\050\035\054\040\052\041\046\042\045\001\002\000\024"
			+ "\004\051\006\055\010\061\033\062\034\050\035\054\040"
			+ "\052\041\046\042\045\001\002\000\024\004\051\006\055"
			+ "\010\061\033\062\034\050\035\054\040\052\041\046\042"
			+ "\045\001\002\000\026\005\uffd5\011\uffd5\023\uffd5\025\uffd5"
			+ "\026\uffd5\030\uffd5\031\uffd5\032\uffd5\036\uffd5\037\uffd5\001"
			+ "\002\000\026\005\uffd4\011\uffd4\023\uffd4\025\uffd4\026\uffd4"
			+ "\030\uffd4\031\uffd4\032\064\036\uffd4\037\uffd4\001\002\000"
			+ "\026\005\uffd3\011\uffd3\023\uffd3\025\uffd3\026\uffd3\030\uffd3"
			+ "\031\uffd3\032\uffd3\036\uffd3\037\uffd3\001\002\000\026\005"
			+ "\uffce\011\uffce\023\uffce\025\uffce\026\uffce\030\uffce\031\uffce"
			+ "\032\uffce\036\uffce\037\uffce\001\002\000\004\005\074\001"
			+ "\002\000\026\005\uffd0\011\uffd0\023\uffd0\025\uffd0\026\uffd0"
			+ "\030\uffd0\031\uffd0\032\uffd0\036\uffd0\037\uffd0\001\002\000"
			+ "\024\004\051\006\055\010\061\033\062\034\050\035\054"
			+ "\040\052\041\046\042\045\001\002\000\006\005\uffdd\036"
			+ "\uffdd\001\002\000\006\005\uffde\036\101\001\002\000\004"
			+ "\005\104\001\002\000\024\004\051\006\055\010\061\033"
			+ "\062\034\050\035\054\040\052\041\046\042\045\001\002"
			+ "\000\006\005\uffde\036\101\001\002\000\004\005\uffdf\001"
			+ "\002\000\010\011\uffe0\026\uffe0\037\uffe0\001\002\000\004"
			+ "\023\106\001\002\000\016\010\031\017\017\020\035\021"
			+ "\022\022\033\024\026\001\002\000\010\011\uffd9\026\uffd9"
			+ "\037\110\001\002\000\016\010\031\017\017\020\035\021"
			+ "\022\022\033\024\026\001\002\000\010\011\uffd8\026\uffd8"
			+ "\037\uffd8\001\002\000\004\025\113\001\002\000\004\024"
			+ "\026\001\002\000\010\011\uffd7\026\uffd7\037\uffd7\001\002"
			+ "\000\016\010\031\017\017\020\035\021\022\022\033\024"
			+ "\026\001\002\000\004\026\117\001\002\000\012\011\ufff0"
			+ "\012\ufff0\026\ufff0\037\ufff0\001\002\000\006\011\115\026"
			+ "\uffee\001\002\000\004\026\uffef\001\002\000\004\010\061"
			+ "\001\002\000\006\005\uffe4\036\126\001\002\000\006\005"
			+ "\uffe3\036\uffe3\001\002\000\004\005\131\001\002\000\004"
			+ "\010\061\001\002\000\006\005\uffe4\036\126\001\002\000"
			+ "\004\005\uffe5\001\002\000\010\011\uffe6\026\uffe6\037\uffe6"
			+ "\001\002\000\006\014\014\017\ufff4\001\002\000\004\017"
			+ "\ufff5\001\002\000\004\011\135\001\002\000\012\010\ufffd"
			+ "\013\010\020\ufffd\021\ufffd\001\002\000\004\011\ufff3\001"
			+ "\002\000\010\010\031\020\035\021\022\001\002\000\004"
			+ "\011\ufff2\001\002\000\010\015\ufff8\016\ufff8\036\151\001"
			+ "\002\000\004\011\143\001\002\000\014\010\141\014\ufffb"
			+ "\017\ufffb\020\ufffb\021\ufffb\001\002\000\014\010\ufffe\014"
			+ "\ufffe\017\ufffe\020\ufffe\021\ufffe\001\002\000\004\011\146"
			+ "\001\002\000\014\010\141\014\ufffb\017\ufffb\020\ufffb\021"
			+ "\ufffb\001\002\000\014\010\ufffc\014\ufffc\017\ufffc\020\ufffc"
			+ "\021\ufffc\001\002\000\006\015\154\016\156\001\002\000"
			+ "\004\010\152\001\002\000\010\015\ufff8\016\ufff8\036\151"
			+ "\001\002\000\006\015\ufff9\016\ufff9\001\002\000\004\011"
			+ "\ufff7\001\002\000\004\011\ufffa\001\002\000\004\011\ufff6"
			+ "\001\002\000\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\155\000\004\002\003\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\006\003\011\004\010"
			+ "\001\001\000\004\007\141\001\001\000\006\005\015\010"
			+ "\014\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\006\020\012\017\001"
			+ "\001\000\034\012\033\013\023\014\041\015\022\016\031"
			+ "\017\037\020\035\021\036\024\024\025\027\036\026\037"
			+ "\040\040\042\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\031\115\001"
			+ "\001\000\002\001\001\000\016\022\111\026\056\034\052"
			+ "\035\057\036\026\037\046\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\016"
			+ "\022\104\026\056\034\052\035\057\036\026\037\046\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\016\022\055\026\056"
			+ "\034\052\035\057\036\026\037\046\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\016\022\072\026\056\034\052\035\057\036\026\037"
			+ "\046\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\014\026\071\034\052\035\057\036\026\037"
			+ "\046\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\016\022\062\026\056\034"
			+ "\052\035\057\036\026\037\046\001\001\000\002\001\001"
			+ "\000\014\026\070\034\052\035\057\036\026\037\046\001"
			+ "\001\000\014\026\067\034\052\035\057\036\026\037\046"
			+ "\001\001\000\014\026\066\034\052\035\057\036\026\037"
			+ "\046\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\020\022\075\023\076\026\056\034\052\035\057"
			+ "\036\026\037\046\001\001\000\002\001\001\000\004\033"
			+ "\077\001\001\000\002\001\001\000\020\022\075\023\101"
			+ "\026\056\034\052\035\057\036\026\037\046\001\001\000"
			+ "\004\033\102\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\034\012\033\013\106\014\041\015"
			+ "\022\016\031\017\037\020\035\021\036\024\024\025\027"
			+ "\036\026\037\040\040\042\001\001\000\002\001\001\000"
			+ "\034\012\033\013\110\014\041\015\022\016\031\017\037"
			+ "\020\035\021\036\024\024\025\027\036\026\037\040\040"
			+ "\042\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\025\113\001\001\000\002\001\001\000\034\012\033\013"
			+ "\117\014\041\015\022\016\031\017\037\020\035\021\036"
			+ "\024\024\025\027\036\026\037\040\040\042\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\031\120\001\001"
			+ "\000\002\001\001\000\010\036\026\037\123\042\122\001"
			+ "\001\000\004\032\124\001\001\000\002\001\001\000\002"
			+ "\001\001\000\010\036\026\037\123\042\126\001\001\000"
			+ "\004\032\127\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\005\132\010\014\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\004\136\011\135\001\001\000\002"
			+ "\001\001\000\022\014\137\016\031\017\037\020\035\021"
			+ "\036\036\026\037\040\040\042\001\001\000\002\001\001"
			+ "\000\004\030\147\001\001\000\002\001\001\000\006\007"
			+ "\144\027\143\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\007\144\027\146\001\001\000\002\001\001\000"
			+ "\004\041\154\001\001\000\002\001\001\000\004\030\152"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$GrammaticaCup$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$GrammaticaCup$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$GrammaticaCup$do_action(act_num, parser, stack,
				top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {
		Symbol nxt = scanner.next_token();
		System.out.println(Wrapper.getClassName(nxt.sym));
		return nxt;
	}

	Scanner scanner;

	GrammaticaCup(Scanner s, String c) {
		super(s);
		this.scanner = s;
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$GrammaticaCup$actions {
	private final GrammaticaCup parser;

	/** Constructor */
	CUP$GrammaticaCup$actions(GrammaticaCup parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$GrammaticaCup$do_action(
			int CUP$GrammaticaCup$act_num,
			java_cup.runtime.lr_parser CUP$GrammaticaCup$parser,
			java.util.Stack CUP$GrammaticaCup$stack, int CUP$GrammaticaCup$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$GrammaticaCup$result;

		/* select the action based on the action number */
		switch (CUP$GrammaticaCup$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // constant_identifier ::= FALSE
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant_identifier", 26,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // constant_identifier ::= TRUE
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant_identifier", 26,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // constant ::= constant_identifier
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 27,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // constant ::= CHARACTER_CONSTANT
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 27,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // constant ::= STRING_CONSTANT
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 27,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // constant ::= INTEGER_CONSTANT
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 27,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // variable_identifier ::= IDENTIFIER
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_identifier", 28,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // variable ::= variable_identifier
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable", 29,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // simple_expression ::= UNARY_MINUS simple_expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // simple_expression ::= NOT expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // simple_expression ::= LPAR expression RPAR
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // simple_expression ::= constant
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression", 20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // simple_expression ::= variable
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression", 20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // simple_expression ::= simple_expression MULTIPLYING_OPERATOR
					// simple_expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // simple_expression ::= simple_expression ADDING_OPERATOR
					// simple_expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // expression ::= simple_expression RELATIONAL_OPERATOR
					// simple_expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"expression",
					16,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // expression ::= simple_expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"expression", 16,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // while_statement ::= WHILE expression DO while_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"while_statement",
					19,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // if_statement ::= IF expression THEN statement ELSE statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"if_statement",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 5)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // if_statement ::= IF expression THEN statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"if_statement",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // structured_statement ::= while_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"structured_statement", 11,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // structured_statement ::= if_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"structured_statement", 11,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // structured_statement ::= compound_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"structured_statement", 11,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // output_value ::= expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"output_value", 17,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // separator_output_value ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_output_value", 25,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // separator_output_value ::= SEPARATOR output_value
					// separator_output_value
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_output_value",
					25,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // write_statement ::= WRITE LPAR output_value
					// separator_output_value RPAR
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"write_statement",
					15,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 4)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // procedure_identifier ::= IDENTIFIER
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_identifier", 30,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // procedure_statement ::= procedure_identifier
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_statement", 14,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // input_variable ::= variable
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"input_variable", 32,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // separator_input_variable ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_input_variable", 24,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // separator_input_variable ::= SEPARATOR input_variable
					// separator_input_variable
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_input_variable",
					24,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // read_statement ::= READ LPAR input_variable
					// separator_input_variable RPAR
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"read_statement",
					13,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 4)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // assignment_statement ::= variable ASSIGN expression
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"assignment_statement",
					12,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // simple_statement ::= write_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // simple_statement ::= procedure_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // simple_statement ::= read_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // simple_statement ::= assignment_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // statement ::= structured_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"statement", 9,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // statement ::= simple_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"statement", 9,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // instruction_separator_statement ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"instruction_separator_statement", 23,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // instruction_separator_statement ::= INSTRUCTION_SEPARATOR
					// statement instruction_separator_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"instruction_separator_statement",
					23,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // compound_statement ::= BEGIN statement
					// instruction_separator_statement END
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"compound_statement",
					8,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // statement_part ::= compound_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"statement_part", 4,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // simple_block ::= variable_declaration_part simple_statement
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_block",
					7,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // procedure_declaration ::= PROCEDURE IDENTIFIER
					// INSTRUCTION_SEPARATOR simple_block
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_declaration",
					6,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // procedure_declaration_part ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_declaration_part", 3,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // procedure_declaration_part ::= procedure_declaration
					// INSTRUCTION_SEPARATOR procedure_declaration_part
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_declaration_part",
					3,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // simple_type ::= BOOLEAN
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_type", 31,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // simple_type ::= INTEGER
		{
			String RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_type", 31,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // separator_identifier ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_identifier", 22,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // separator_identifier ::= SEPARATOR IDENTIFIER
				// separator_identifier
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_identifier",
					22,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // variable_declaration ::= IDENTIFIER separator_identifier
				// simple_type
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration",
					5,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // variable_declaration_list ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_list", 21,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // variable_declaration_list ::= variable_declaration
				// INSTRUCTION_SEPARATOR variable_declaration_list
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_list",
					21,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // variable_declaration_part ::=
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_part", 2,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // variable_declaration_part ::= VAR variable_declaration
				// INSTRUCTION_SEPARATOR variable_declaration_list
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_part",
					2,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // block ::= variable_declaration_part
				// procedure_declaration_part statement_part
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"block",
					1,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= program_nt EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			RESULT = start_val;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"$START",
					0,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			/* ACCEPT */
			CUP$GrammaticaCup$parser.done_parsing();
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // program_nt ::= PROGRAM IDENTIFIER INSTRUCTION_SEPARATOR block
				// END_PROGRAM
		{
			Object RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"program_nt",
					0,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 4)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
