//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 17 12:03:07 CEST 2017
//----------------------------------------------------

package esercizio5;

import java_cup.runtime.*;
import java.util.ArrayList;
import esercizio5.visitor.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Sun Sep 17 12:03:07 CEST 2017
 */
public class GrammaticaCup extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public GrammaticaCup() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public GrammaticaCup(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public GrammaticaCup(java_cup.runtime.Scanner s,
			java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\076\000\002\002\007\000\002\002\004\000\002\003"
			+ "\005\000\002\004\006\000\002\004\002\000\002\027\005"
			+ "\000\002\027\002\000\002\006\005\000\002\030\005\000"
			+ "\002\030\002\000\002\041\003\000\002\041\003\000\002"
			+ "\034\005\000\002\034\002\000\002\007\006\000\002\010"
			+ "\004\000\002\005\003\000\002\011\006\000\002\031\005"
			+ "\000\002\031\002\000\002\012\003\000\002\012\003\000"
			+ "\002\013\003\000\002\013\003\000\002\013\003\000\002"
			+ "\013\003\000\002\015\005\000\002\016\007\000\002\032"
			+ "\005\000\002\032\002\000\002\042\003\000\002\026\003"
			+ "\000\002\040\003\000\002\017\007\000\002\033\005\000"
			+ "\002\033\002\000\002\021\003\000\002\014\003\000\002"
			+ "\014\003\000\002\014\003\000\002\022\006\000\002\022"
			+ "\010\000\002\023\006\000\002\020\003\000\002\020\005"
			+ "\000\002\024\005\000\002\024\005\000\002\024\003\000"
			+ "\002\024\003\000\002\024\005\000\002\024\004\000\002"
			+ "\024\004\000\002\043\003\000\002\043\003\000\002\037"
			+ "\003\000\002\036\003\000\002\025\003\000\002\025\003"
			+ "\000\002\025\003\000\002\025\003\000\002\035\003\000"
			+ "\002\035\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\157\000\004\007\005\001\002\000\004\002\161\001"
			+ "\002\000\004\010\006\001\002\000\004\011\007\001\002"
			+ "\000\010\013\010\014\ufffd\017\ufffd\001\002\000\004\010"
			+ "\143\001\002\000\006\014\014\017\ufff4\001\002\000\004"
			+ "\012\013\001\002\000\004\002\001\001\002\000\004\010"
			+ "\136\001\002\000\004\011\134\001\002\000\004\017\017"
			+ "\001\002\000\016\010\031\017\017\020\035\021\022\022"
			+ "\033\024\026\001\002\000\006\011\ufff1\012\ufff1\001\002"
			+ "\000\004\012\uffff\001\002\000\004\004\124\001\002\000"
			+ "\010\011\uffec\026\uffec\037\uffec\001\002\000\006\011\117"
			+ "\026\uffee\001\002\000\010\011\uffdb\026\uffdb\037\uffdb\001"
			+ "\002\000\024\004\052\006\045\010\061\033\062\034\051"
			+ "\035\055\040\053\041\047\042\046\001\002\000\032\005"
			+ "\uffcb\006\uffcb\011\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb"
			+ "\030\uffcb\031\uffcb\032\uffcb\036\uffcb\037\uffcb\001\002\000"
			+ "\010\011\uffda\026\uffda\037\uffda\001\002\000\012\011\uffe1"
			+ "\026\uffe1\027\uffca\037\uffe1\001\002\000\010\011\uffeb\026"
			+ "\uffeb\037\uffeb\001\002\000\024\004\052\006\045\010\061"
			+ "\033\062\034\051\035\055\040\053\041\047\042\046\001"
			+ "\002\000\010\011\uffdc\026\uffdc\037\uffdc\001\002\000\004"
			+ "\004\077\001\002\000\010\011\uffe9\026\uffe9\037\uffe9\001"
			+ "\002\000\010\011\uffe8\026\uffe8\037\uffe8\001\002\000\010"
			+ "\011\uffea\026\uffea\037\uffea\001\002\000\004\027\044\001"
			+ "\002\000\010\011\uffed\026\uffed\037\uffed\001\002\000\010"
			+ "\011\uffe2\026\uffe2\037\uffe2\001\002\000\024\004\052\006"
			+ "\045\010\061\033\062\034\051\035\055\040\053\041\047"
			+ "\042\046\001\002\000\024\004\052\006\045\010\061\033"
			+ "\062\034\051\035\055\040\053\041\047\042\046\001\002"
			+ "\000\030\005\uffc7\006\uffc7\011\uffc7\023\uffc7\025\uffc7\026"
			+ "\uffc7\030\uffc7\031\uffc7\032\uffc7\036\uffc7\037\uffc7\001\002"
			+ "\000\030\005\uffc8\006\uffc8\011\uffc8\023\uffc8\025\uffc8\026"
			+ "\uffc8\030\uffc8\031\uffc8\032\uffc8\036\uffc8\037\uffc8\001\002"
			+ "\000\030\005\uffd2\006\uffd2\011\uffd2\023\uffd2\025\uffd2\026"
			+ "\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2\037\uffd2\001\002"
			+ "\000\030\005\uffc5\006\uffc5\011\uffc5\023\uffc5\025\uffc5\026"
			+ "\uffc5\030\uffc5\031\uffc5\032\uffc5\036\uffc5\037\uffc5\001\002"
			+ "\000\024\004\052\006\045\010\061\033\062\034\051\035"
			+ "\055\040\053\041\047\042\046\001\002\000\030\005\uffc9"
			+ "\006\uffc9\011\uffc9\023\uffc9\025\uffc9\026\uffc9\030\uffc9\031"
			+ "\uffc9\032\uffc9\036\uffc9\037\uffc9\001\002\000\030\005\uffc6"
			+ "\006\uffc6\011\uffc6\023\uffc6\025\uffc6\026\uffc6\030\uffc6\031"
			+ "\uffc6\032\uffc6\036\uffc6\037\uffc6\001\002\000\030\005\uffc4"
			+ "\006\uffc4\011\uffc4\023\uffc4\025\uffc4\026\uffc4\030\uffc4\031"
			+ "\uffc4\032\uffc4\036\uffc4\037\uffc4\001\002\000\010\011\uffe7"
			+ "\026\uffe7\037\uffe7\001\002\000\030\005\uffd6\006\064\011"
			+ "\uffd6\023\uffd6\025\uffd6\026\uffd6\030\070\031\067\032\065"
			+ "\036\uffd6\037\uffd6\001\002\000\030\005\uffd1\006\uffd1\011"
			+ "\uffd1\023\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1"
			+ "\036\uffd1\037\uffd1\001\002\000\030\005\uffca\006\uffca\011"
			+ "\uffca\023\uffca\025\uffca\026\uffca\030\uffca\031\uffca\032\uffca"
			+ "\036\uffca\037\uffca\001\002\000\024\004\052\006\045\010"
			+ "\061\033\062\034\051\035\055\040\053\041\047\042\046"
			+ "\001\002\000\030\005\uffcf\006\uffcf\011\uffcf\023\uffcf\025"
			+ "\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\036\uffcf\037\uffcf"
			+ "\001\002\000\024\004\uffcc\006\uffcc\010\uffcc\033\uffcc\034"
			+ "\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc\001\002\000\024"
			+ "\004\052\006\045\010\061\033\062\034\051\035\055\040"
			+ "\053\041\047\042\046\001\002\000\024\004\052\006\045"
			+ "\010\061\033\062\034\051\035\055\040\053\041\047\042"
			+ "\046\001\002\000\024\004\uffcd\006\uffcd\010\uffcd\033\uffcd"
			+ "\034\uffcd\035\uffcd\040\uffcd\041\uffcd\042\uffcd\001\002\000"
			+ "\024\004\052\006\045\010\061\033\062\034\051\035\055"
			+ "\040\053\041\047\042\046\001\002\000\030\005\uffd5\006"
			+ "\064\011\uffd5\023\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5"
			+ "\032\uffd5\036\uffd5\037\uffd5\001\002\000\030\005\uffd4\006"
			+ "\064\011\uffd4\023\uffd4\025\uffd4\026\uffd4\030\uffd4\031\067"
			+ "\032\065\036\uffd4\037\uffd4\001\002\000\030\005\uffd3\006"
			+ "\064\011\uffd3\023\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3"
			+ "\032\uffd3\036\uffd3\037\uffd3\001\002\000\004\005\075\001"
			+ "\002\000\030\005\uffd0\006\uffd0\011\uffd0\023\uffd0\025\uffd0"
			+ "\026\uffd0\030\uffd0\031\uffd0\032\uffd0\036\uffd0\037\uffd0\001"
			+ "\002\000\030\005\uffce\006\064\011\uffce\023\uffce\025\uffce"
			+ "\026\uffce\030\uffce\031\uffce\032\uffce\036\uffce\037\uffce\001"
			+ "\002\000\024\004\052\006\045\010\061\033\062\034\051"
			+ "\035\055\040\053\041\047\042\046\001\002\000\006\005"
			+ "\uffdd\036\uffdd\001\002\000\006\005\uffde\036\103\001\002"
			+ "\000\004\005\106\001\002\000\024\004\052\006\045\010"
			+ "\061\033\062\034\051\035\055\040\053\041\047\042\046"
			+ "\001\002\000\006\005\uffde\036\103\001\002\000\004\005"
			+ "\uffdf\001\002\000\010\011\uffe0\026\uffe0\037\uffe0\001\002"
			+ "\000\004\023\110\001\002\000\016\010\031\017\017\020"
			+ "\035\021\022\022\033\024\026\001\002\000\010\011\uffd9"
			+ "\026\uffd9\037\112\001\002\000\016\010\031\017\017\020"
			+ "\035\021\022\022\033\024\026\001\002\000\010\011\uffd8"
			+ "\026\uffd8\037\uffd8\001\002\000\004\025\115\001\002\000"
			+ "\016\010\031\017\017\020\035\021\022\022\033\024\026"
			+ "\001\002\000\010\011\uffd7\026\uffd7\037\uffd7\001\002\000"
			+ "\016\010\031\017\017\020\035\021\022\022\033\024\026"
			+ "\001\002\000\004\026\121\001\002\000\012\011\ufff0\012"
			+ "\ufff0\026\ufff0\037\ufff0\001\002\000\006\011\117\026\uffee"
			+ "\001\002\000\004\026\uffef\001\002\000\004\010\061\001"
			+ "\002\000\006\005\uffe4\036\130\001\002\000\006\005\uffe3"
			+ "\036\uffe3\001\002\000\004\005\133\001\002\000\004\010"
			+ "\061\001\002\000\006\005\uffe4\036\130\001\002\000\004"
			+ "\005\uffe5\001\002\000\010\011\uffe6\026\uffe6\037\uffe6\001"
			+ "\002\000\006\014\014\017\ufff4\001\002\000\004\017\ufff5"
			+ "\001\002\000\004\011\137\001\002\000\006\013\010\017"
			+ "\ufffd\001\002\000\004\011\ufff3\001\002\000\004\017\017"
			+ "\001\002\000\004\011\ufff2\001\002\000\010\015\ufff8\016"
			+ "\ufff8\036\153\001\002\000\004\011\145\001\002\000\010"
			+ "\010\143\014\ufffb\017\ufffb\001\002\000\006\014\ufffe\017"
			+ "\ufffe\001\002\000\004\011\150\001\002\000\010\010\143"
			+ "\014\ufffb\017\ufffb\001\002\000\006\014\ufffc\017\ufffc\001"
			+ "\002\000\006\015\156\016\160\001\002\000\004\010\154"
			+ "\001\002\000\010\015\ufff8\016\ufff8\036\153\001\002\000"
			+ "\006\015\ufff9\016\ufff9\001\002\000\004\011\ufff7\001\002"
			+ "\000\004\011\ufffa\001\002\000\004\011\ufff6\001\002\000"
			+ "\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\157\000\004\002\003\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\006\003\011\004\010"
			+ "\001\001\000\004\006\143\001\001\000\006\007\014\034"
			+ "\015\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\005\020\011\017\001"
			+ "\001\000\034\011\033\012\023\013\041\014\022\015\031"
			+ "\016\037\017\036\022\024\023\027\026\035\036\026\037"
			+ "\040\040\042\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\031\117\001"
			+ "\001\000\002\001\001\000\016\020\113\024\056\025\057"
			+ "\035\053\036\026\037\047\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\016"
			+ "\020\106\024\056\025\057\035\053\036\026\037\047\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\016\020\055\024\056"
			+ "\025\057\035\053\036\026\037\047\001\001\000\014\024"
			+ "\075\025\057\035\053\036\026\037\047\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\016\020\073\024\056\025\057\035\053\036\026"
			+ "\037\047\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\043\065\001\001"
			+ "\000\002\001\001\000\002\001\001\000\016\020\062\024"
			+ "\056\025\057\035\053\036\026\037\047\001\001\000\002"
			+ "\001\001\000\002\001\001\000\014\024\072\025\057\035"
			+ "\053\036\026\037\047\001\001\000\014\024\071\025\057"
			+ "\035\053\036\026\037\047\001\001\000\002\001\001\000"
			+ "\014\024\070\025\057\035\053\036\026\037\047\001\001"
			+ "\000\004\043\065\001\001\000\004\043\065\001\001\000"
			+ "\004\043\065\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\043\065\001\001\000\020\020\077\021\100\024"
			+ "\056\025\057\035\053\036\026\037\047\001\001\000\002"
			+ "\001\001\000\004\033\101\001\001\000\002\001\001\000"
			+ "\020\020\077\021\103\024\056\025\057\035\053\036\026"
			+ "\037\047\001\001\000\004\033\104\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\034\011\033"
			+ "\012\110\013\041\014\022\015\031\016\037\017\036\022"
			+ "\024\023\027\026\035\036\026\037\040\040\042\001\001"
			+ "\000\002\001\001\000\034\011\033\012\112\013\041\014"
			+ "\022\015\031\016\037\017\036\022\024\023\027\026\035"
			+ "\036\026\037\040\040\042\001\001\000\002\001\001\000"
			+ "\002\001\001\000\034\011\033\012\115\013\041\014\022"
			+ "\015\031\016\037\017\036\022\024\023\027\026\035\036"
			+ "\026\037\040\040\042\001\001\000\002\001\001\000\034"
			+ "\011\033\012\121\013\041\014\022\015\031\016\037\017"
			+ "\036\022\024\023\027\026\035\036\026\037\040\040\042"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\031"
			+ "\122\001\001\000\002\001\001\000\010\036\026\037\125"
			+ "\042\124\001\001\000\004\032\126\001\001\000\002\001"
			+ "\001\000\002\001\001\000\010\036\026\037\125\042\130"
			+ "\001\001\000\004\032\131\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\007\014\034\134\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\004\140\010\137\001"
			+ "\001\000\002\001\001\000\006\005\141\011\017\001\001"
			+ "\000\002\001\001\000\004\030\151\001\001\000\002\001"
			+ "\001\000\006\006\146\027\145\001\001\000\002\001\001"
			+ "\000\002\001\001\000\006\006\146\027\150\001\001\000"
			+ "\002\001\001\000\004\041\156\001\001\000\002\001\001"
			+ "\000\004\030\154\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$GrammaticaCup$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$GrammaticaCup$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$GrammaticaCup$do_action(act_num, parser, stack,
				top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		Symbol next = scanner.next_token();
		// System.out.println(Wrapper.getClassName(next.sym));
		return next;

	}

	Scanner scanner;

	GrammaticaCup(Scanner s, String c) {
		super(s);
		this.scanner = s;
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$GrammaticaCup$actions {

	private VisitableNode<String> buildNode(String name,
			VisitableNode<String>... children) {
		VisitableNode<String> node = new VisitableNode<String>(name, null);
		for (int i = 0; i < children.length; i++) {
			node.addChild(children[i]);
		}
		return node;
	}

	private VisitableNode<String> buildNode(String name,
			ArrayList<VisitableNode<String>> children) {
		VisitableNode<String> node = new VisitableNode<String>(name, null);
		for (int i = 0; i < children.size(); i++) {
			node.addChild(children.get(i));
		}
		return node;
	}

	private VisitableNode<String> buildNodeWithValue(String name, String value) {
		return new VisitableNode<String>(name, value);
	}

	private final GrammaticaCup parser;

	/** Constructor */
	CUP$GrammaticaCup$actions(GrammaticaCup parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$GrammaticaCup$do_action(
			int CUP$GrammaticaCup$act_num,
			java_cup.runtime.lr_parser CUP$GrammaticaCup$parser,
			java.util.Stack CUP$GrammaticaCup$stack, int CUP$GrammaticaCup$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$GrammaticaCup$result;

		/* select the action based on the action number */
		switch (CUP$GrammaticaCup$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // constant_identifier ::= FALSE
		{
			String RESULT = null;
			RESULT = Wrapper.getClassName(sym.FALSE);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant_identifier", 27,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // constant_identifier ::= TRUE
		{
			String RESULT = null;
			RESULT = Wrapper.getClassName(sym.TRUE);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant_identifier", 27,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // constant ::= constant_identifier
		{
			VisitableNode<String> RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNodeWithValue("BOOLEAN_CONSTANT", c);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 19,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // constant ::= CHARACTER_CONSTANT
		{
			VisitableNode<String> RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNodeWithValue("CHARACTER_CONSTANT", c);
			;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 19,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // constant ::= STRING_CONSTANT
		{
			VisitableNode<String> RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNodeWithValue("STRING_CONSTANT", c);
			;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 19,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // constant ::= INTEGER_CONSTANT
		{
			VisitableNode<String> RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNodeWithValue("INTEGER_CONSTANT", c);
			;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"constant", 19,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // variable_identifier ::= IDENTIFIER
		{
			String RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = id;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_identifier", 28,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // variable ::= variable_identifier
		{
			String RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = id;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable", 29,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // adding_operator ::= MINUS
		{
			String RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = "-";
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"adding_operator", 33,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // adding_operator ::= ADDING_OPERATOR
		{
			String RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = v;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"adding_operator", 33,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // simple_expression ::= MINUS simple_expression
		{
			VisitableNode<String> RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int expright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> exp = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNode("UnaryMinusOp", exp);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // simple_expression ::= NOT expression
		{
			VisitableNode<String> RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int expright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> exp = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNode("NotOp", exp);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // simple_expression ::= LPAR expression RPAR
		{
			VisitableNode<String> RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			VisitableNode<String> exp = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			RESULT = buildNode("ExprOp", exp);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // simple_expression ::= constant
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNode("ConstOp", node);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression", 18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // simple_expression ::= variable
		{
			VisitableNode<String> RESULT = null;
			int varleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int varright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String var = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNode("VarOp", new VisitableNode<String>("ID", var));
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression", 18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // simple_expression ::= simple_expression MULTIPLYING_OPERATOR
					// simple_expression
		{
			VisitableNode<String> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int attrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int attrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			String attr = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node_2 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			VisitableNode<String> mul_op = new VisitableNode<String>(
					"MULTIPLYING_OPERATOR", attr);
			RESULT = buildNode("MulOp", mul_op, node_1, node_2);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // simple_expression ::= simple_expression adding_operator
					// simple_expression
		{
			VisitableNode<String> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int attrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int attrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			String attr = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node_2 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			VisitableNode<String> add_op = new VisitableNode<String>(
					"ADDING_OPERATOR", attr);
			RESULT = buildNode("AddOp", add_op, node_1, node_2);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_expression",
					18,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // expression ::= simple_expression RELATIONAL_OPERATOR
					// simple_expression
		{
			VisitableNode<String> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int attrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int attrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			String attr = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node_2 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			VisitableNode<String> relop = new VisitableNode<String>(
					"RELATIONAL_OPERATOR", attr);
			RESULT = buildNode("RelationalOp", relop, node_1, node_2);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"expression",
					14,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // expression ::= simple_expression
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNode("SimpleExprOp", node);
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"expression", 14,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // while_statement ::= WHILE expression DO statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int st_ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int st_ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> st_ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("WhileOp", ptr, st_ptr);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"while_statement",
					17,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // if_statement ::= IF expression THEN statement ELSE statement
		{
			VisitableNode<String> RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 4)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 4)).right;
			VisitableNode<String> exp = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 4)).value;
			int stmt_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int stmt_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> stmt_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int stmt_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int stmt_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> stmt_2 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("IfThenElseOp", exp, stmt_1, stmt_2);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"if_statement",
					16,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 5)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // if_statement ::= IF expression THEN statement
		{
			VisitableNode<String> RESULT = null;
			int expleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int expright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> exp = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int stmtleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int stmtright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> stmt = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("IfThenOp", exp, stmt);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"if_statement",
					16,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // structured_statement ::= while_statement
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = node;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"structured_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // structured_statement ::= if_statement
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = node;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"structured_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // structured_statement ::= compound_statement
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = node;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"structured_statement", 10,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // output_value ::= expression
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = node;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"output_value", 15,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // separator_output_value ::=
		{
			ArrayList<VisitableNode<String>> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_output_value", 25,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // separator_output_value ::= SEPARATOR output_value
					// separator_output_value
		{
			ArrayList<VisitableNode<String>> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> node_2 = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
			result.add(node_1);
			if (node_2 != null)
				result.addAll(node_2);
			RESULT = result;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_output_value",
					25,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // write_statement ::= WRITE LPAR output_value
					// separator_output_value RPAR
		{
			VisitableNode<String> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;

			if (list != null) {
				list.add(0, node_1);
				RESULT = buildNode("WriteOp", list);
			} else
				RESULT = buildNode("WriteOp", node_1);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"write_statement",
					13,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 4)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // procedure_identifier ::= IDENTIFIER
		{
			String RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = id;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_identifier", 30,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // procedure_statement ::= procedure_identifier
		{
			VisitableNode<String> RESULT = null;
			int p_idleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int p_idright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String p_id = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = buildNode("CallOp", buildNodeWithValue("ID", p_id));
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_statement", 20,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // input_variable ::= variable
		{
			String RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = v;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"input_variable", 32,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // separator_input_variable ::=
		{
			ArrayList<VisitableNode<String>> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_input_variable", 24,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // separator_input_variable ::= SEPARATOR input_variable
					// separator_input_variable
		{
			ArrayList<VisitableNode<String>> RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> node = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
			result.add(buildNodeWithValue("ID", v));
			if (node != null)
				result.addAll(node);
			RESULT = result;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_input_variable",
					24,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // read_statement ::= READ LPAR input_variable
					// separator_input_variable RPAR
		{
			VisitableNode<String> RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;

			if (list != null) {
				list.add(0, buildNodeWithValue("ID", v));
				RESULT = buildNode("ReadOp", list);
			} else
				RESULT = buildNode("ReadOp", buildNodeWithValue("ID", v));

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"read_statement",
					12,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 4)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // assignment_statement ::= variable ASSIGN expression
		{
			VisitableNode<String> RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int expleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int expright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> exp = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("AssignOp", buildNodeWithValue("ID", id), exp);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"assignment_statement",
					11,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // simple_statement ::= write_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 9,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // simple_statement ::= procedure_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 9,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // simple_statement ::= read_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 9,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // simple_statement ::= assignment_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_statement", 9,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // statement ::= structured_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"statement", 8,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // statement ::= simple_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"statement", 8,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // instruction_separator_statement ::=
		{
			ArrayList<VisitableNode<String>> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"instruction_separator_statement", 23,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // instruction_separator_statement ::= INSTRUCTION_SEPARATOR
					// statement instruction_separator_statement
		{
			ArrayList<VisitableNode<String>> RESULT = null;
			int stmtleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int stmtright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			VisitableNode<String> stmt = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> node = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
			result.add(stmt);
			if (node != null)
				result.addAll(node);
			RESULT = result;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"instruction_separator_statement",
					23,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // compound_statement ::= BEGIN statement
					// instruction_separator_statement END
		{
			VisitableNode<String> RESULT = null;
			int stmtleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int stmtright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> stmt = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;

			if (list != null) {
				list.add(0, stmt);
				RESULT = buildNode("CompStatOp", list);
			} else
				RESULT = buildNode("CompStatOp", stmt);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"compound_statement",
					7,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // statement_part ::= compound_statement
		{
			VisitableNode<String> RESULT = null;
			int ptrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int ptrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> ptr = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;
			RESULT = ptr;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"statement_part", 3,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // simple_block ::= variable_declaration_part statement_part
		{
			VisitableNode<String> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node_2 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("SimpleBlockOp", node_1, node_2);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_block",
					6,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // procedure_declaration ::= PROCEDURE IDENTIFIER
					// INSTRUCTION_SEPARATOR simple_block
		{
			VisitableNode<String> RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("ProcDeclOp", buildNodeWithValue("ID", v), node);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_declaration",
					5,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // procedure_declaration_part ::=
		{
			ArrayList<VisitableNode<String>> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_declaration_part", 26,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // procedure_declaration_part ::= procedure_declaration
					// INSTRUCTION_SEPARATOR procedure_declaration_part
		{
			ArrayList<VisitableNode<String>> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
			result.add(node);
			if (list != null)
				result.addAll(list);
			RESULT = result;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"procedure_declaration_part",
					26,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // simple_type ::= BOOLEAN
		{
			String RESULT = null;
			RESULT = "BOOLEAN";
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_type", 31,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // simple_type ::= INTEGER
		{
			String RESULT = null;
			RESULT = "INTEGER";
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"simple_type", 31,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // separator_identifier ::=
		{
			ArrayList<VisitableNode<String>> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_identifier", 22,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // separator_identifier ::= SEPARATOR IDENTIFIER
				// separator_identifier
		{
			ArrayList<VisitableNode<String>> RESULT = null;
			int attrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int attrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			String attr = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
			result.add(buildNodeWithValue("ID", attr));
			if (list != null)
				result.addAll(list);
			RESULT = result;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"separator_identifier",
					22,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // variable_declaration ::= IDENTIFIER separator_identifier
				// simple_type
		{
			VisitableNode<String> RESULT = null;
			int attrleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int attrright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			String attr = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			if (list != null) {
				list.add(0, buildNode(v));
				list.add(1, buildNodeWithValue("ID", attr));
				RESULT = buildNode("VarDeclOp", list);
			} else
				RESULT = buildNode("VarDeclOp", buildNode(v),
						buildNodeWithValue("ID", attr));

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration",
					4,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // variable_declaration_list ::=
		{
			ArrayList<VisitableNode<String>> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_list", 21,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // variable_declaration_list ::= variable_declaration
				// INSTRUCTION_SEPARATOR variable_declaration_list
		{
			ArrayList<VisitableNode<String>> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> node_2 = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
			result.add(node_1);
			if (node_2 != null) {
				result.addAll(node_2);
			}
			RESULT = result;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_list",
					21,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // variable_declaration_part ::=
		{
			VisitableNode<String> RESULT = null;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_part", 2,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // variable_declaration_part ::= VAR variable_declaration
				// INSTRUCTION_SEPARATOR variable_declaration_list
		{
			VisitableNode<String> RESULT = null;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			if (list != null) {
				list.add(0, node);
				RESULT = buildNode("VarDeclPartOp", list);
			} else
				RESULT = buildNode("VarDeclPartOp", node);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"variable_declaration_part",
					2,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 3)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // block ::= variable_declaration_part
				// procedure_declaration_part statement_part
		{
			VisitableNode<String> RESULT = null;
			int node_1left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).left;
			int node_1right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).right;
			VisitableNode<String> node_1 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			ArrayList<VisitableNode<String>> list = (ArrayList<VisitableNode<String>>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			int node_2left = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).left;
			int node_2right = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).right;
			VisitableNode<String> node_2 = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.peek()).value;

			RESULT = buildNode("BlockOp", node_1,
					buildNode("ProcDeclPartOp", list), node_2);

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"block",
					1,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 2)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= program_nt EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			VisitableNode<String> start_val = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;
			RESULT = start_val;
			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"$START",
					0,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 1)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			/* ACCEPT */
			CUP$GrammaticaCup$parser.done_parsing();
			return CUP$GrammaticaCup$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // program_nt ::= PROGRAM IDENTIFIER INSTRUCTION_SEPARATOR block
				// END_PROGRAM
		{
			VisitableNode<String> RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 3)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 3)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 3)).value;
			int nodeleft = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).left;
			int noderight = ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).right;
			VisitableNode<String> node = (VisitableNode<String>) ((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
					.elementAt(CUP$GrammaticaCup$top - 1)).value;

			VisitableNode<String> root = buildNode("ProgramOp",
					buildNodeWithValue("ID", v), node);
			SyntaxTree<String> tree = new SyntaxTree<String>();
			tree.visit(root);
			tree.write();
			RESULT = root;

			CUP$GrammaticaCup$result = parser.getSymbolFactory().newSymbol(
					"program_nt",
					0,
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack
							.elementAt(CUP$GrammaticaCup$top - 4)),
					((java_cup.runtime.Symbol) CUP$GrammaticaCup$stack.peek()),
					RESULT);
		}
			return CUP$GrammaticaCup$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
