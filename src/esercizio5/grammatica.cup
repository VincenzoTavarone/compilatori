package esercizio5;
import java_cup.runtime.*;
import java.util.ArrayList;
import esercizio5.visitor.*;

parser code {:
	Scanner scanner;
	GrammaticaCup(Scanner s, String c){ super(s); this.scanner = s;}
:};

action code {:
	private VisitableNode<String> buildNode(String name, VisitableNode<String>... children){
		VisitableNode<String> node = new VisitableNode<String>(name, null);
		for(int i = 0; i < children.length; i++){
			node.addChild(children[i]);
		}
		return node;
	}
	
	private VisitableNode<String> buildNode(String name, ArrayList<VisitableNode<String>> children){
		VisitableNode<String> node = new VisitableNode<String>(name, null);
		for(int i = 0; i < children.size(); i++){
			node.addChild(children.get(i));
		}
		return node;
	}
	
	private VisitableNode<String> buildNodeWithValue(String name, String value){
		return new VisitableNode<String>(name, value);
	}
:};


scan with {:
	Symbol next = scanner.next_token();
	//System.out.println(Wrapper.getClassName(next.sym));
	return next;
:};

/*Terminali*/
terminal String    	LPAR, RPAR, MINUS, PROGRAM, IDENTIFIER, INSTRUCTION_SEPARATOR, END_PROGRAM, VAR, PROCEDURE, 
					INTEGER, BOOLEAN, BEGIN, WRITE, READ, IF, THEN, WHILE, DO, END, ASSIGN, RELATIONAL_OPERATOR, ADDING_OPERATOR, 
					MULTIPLYING_OPERATOR, NOT, TRUE, FALSE, SEPARATOR, ELSE, INTEGER_CONSTANT, STRING_CONSTANT, CHARACTER_CONSTANT;

/*Non Terminali*/
nonterminal VisitableNode<String>	program_nt, block, variable_declaration_part, statement_part, variable_declaration, procedure_declaration,
									simple_block, compound_statement, statement, simple_statement, structured_statement, assignment_statement,
									read_statement, write_statement, expression, output_value, if_statement, while_statement, simple_expression, constant, procedure_statement;

/*Non Terminali di supporto */
nonterminal	ArrayList<VisitableNode<String>>	variable_declaration_list, separator_identifier, instruction_separator_statement, separator_input_variable, separator_output_value,
												procedure_declaration_part;
			
nonterminal String	constant_identifier, variable_identifier, variable, procedure_identifier, simple_type, input_variable, adding_operator;

/*Precendenze*/
precedence left ADDING_OPERATOR;
precedence left MULTIPLYING_OPERATOR;
precedence left ASSIGN, READ, WRITE;
precedence left ELSE;
precedence left RELATIONAL_OPERATOR;
precedence right MINUS;

program_nt ::=	PROGRAM IDENTIFIER:v INSTRUCTION_SEPARATOR block:node END_PROGRAM {:
					VisitableNode<String> root = buildNode("ProgramOp", buildNodeWithValue("ID", v), node);
					SyntaxTree<String> tree = new SyntaxTree<String>();
					SemanticAnalyzer<String> semantic = new SemanticAnalyzer<String>();
					CTranslator c_translator = new CTranslator();
					tree.visit(root);
					tree.write();
					semantic.visit(root);
					c_translator.visit(root);
					c_translator.write("src/esercizio5/output.c");
					RESULT = root;
				:}
				;
				
block ::=	variable_declaration_part:node_1 procedure_declaration_part:list statement_part:node_2 {:
				RESULT = buildNode("BlockOp", node_1, buildNode("ProcDeclPartOp", list), node_2);
			:} 
			;

variable_declaration_part ::=	VAR variable_declaration:node INSTRUCTION_SEPARATOR variable_declaration_list:list {:
									if(list!=null){
										list.add(0, node);
										RESULT = buildNode("VarDeclPartOp", list);
									}else
										RESULT = buildNode("VarDeclPartOp", node);
								:}
								|
								/* epsilon */
								;
								
variable_declaration_list ::=	variable_declaration:node_1 INSTRUCTION_SEPARATOR variable_declaration_list:node_2 {:
									ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
									result.add(node_1);
									if(node_2!=null){
										result.addAll(node_2);
									}
									RESULT = result;
								:}
								|
								/* epsilon */
								;

variable_declaration ::=	IDENTIFIER:attr separator_identifier:list simple_type:v {:
								if(list!=null){
									list.add(0,buildNode(v));
									list.add(1,buildNodeWithValue("ID", attr));
									RESULT = buildNode("VarDeclOp", list);
								}
								else
									RESULT = buildNode("VarDeclOp",buildNode(v), buildNodeWithValue("ID", attr));				
							:}
							;
							
separator_identifier ::=	SEPARATOR IDENTIFIER:attr separator_identifier:list {:
								ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
								result.add(buildNodeWithValue("ID", attr));
								if(list!=null)
									result.addAll(list);
								RESULT = result;	
							:}
							|
							/* epsilon */
							;

simple_type ::=	INTEGER {: RESULT = "INTEGER";:} | BOOLEAN {: RESULT = "BOOLEAN";:} ;

procedure_declaration_part ::=	procedure_declaration:node INSTRUCTION_SEPARATOR procedure_declaration_part:list {:
									ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
									result.add(node);
									if(list!=null)
										result.addAll(list);
									RESULT = result;
								:}
								|
								/* epsilon */
								;

procedure_declaration ::=	PROCEDURE IDENTIFIER:v INSTRUCTION_SEPARATOR simple_block:node {:
								RESULT = buildNode("ProcDeclOp", buildNodeWithValue("ID", v), node);
							:}
							;
							
simple_block ::=	variable_declaration_part:node_1 statement_part:node_2 {:
						RESULT = buildNode("SimpleBlockOp", node_1, node_2);
					:} ;

statement_part ::=	compound_statement:ptr {: RESULT = ptr; :} ;

compound_statement ::=	BEGIN statement:stmt instruction_separator_statement:list END {:
							if(list!=null){
								list.add(0, stmt);
								RESULT = buildNode("CompStatOp", list);
							}else
								RESULT = buildNode("CompStatOp", stmt);
						:}
						;
						
instruction_separator_statement ::=	INSTRUCTION_SEPARATOR statement:stmt instruction_separator_statement:node {:
										ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
										result.add(stmt);
										if(node!=null)
											result.addAll(node);
										RESULT = result;
									:}
									|
									/* epsilon */
									;
									
statement ::=	simple_statement:ptr {: RESULT = ptr; :}
				|
				structured_statement:ptr {: RESULT = ptr; :}
				;

simple_statement ::=	assignment_statement:ptr {: RESULT = ptr; :}
						|
						read_statement:ptr {: RESULT = ptr; :}
						| 
						procedure_statement:ptr {: RESULT = ptr; :}
						|
						write_statement:ptr {: RESULT = ptr; :}
						;

assignment_statement ::=	variable:id ASSIGN expression:exp {:
								RESULT = buildNode("AssignOp", buildNodeWithValue("ID", id), exp);
							:};

read_statement ::=	READ LPAR input_variable:v separator_input_variable:list RPAR {:
						if(list!=null){
							list.add(0,buildNodeWithValue("ID", v));
							RESULT = buildNode("ReadOp", list);
						}
						else
							RESULT = buildNode("ReadOp", buildNodeWithValue("ID", v));
					:};

separator_input_variable ::=	SEPARATOR input_variable:v separator_input_variable:node {:
									ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
									result.add(buildNodeWithValue("ID", v));
									if(node!=null)
										result.addAll(node);
									RESULT = result;
								:}
								|
								/* epsilon */
								;
								
input_variable ::= variable:v {: RESULT = v;:};

procedure_statement ::= procedure_identifier:p_id {: RESULT = buildNode("CallOp", buildNodeWithValue("ID", p_id)); :} ;

procedure_identifier ::= IDENTIFIER:id {: RESULT = id; :} ;

write_statement ::= WRITE LPAR output_value:node_1 separator_output_value:list RPAR {:
						if(list!=null){
							list.add(0, node_1);
							RESULT = buildNode("WriteOp", list);
						}else
							RESULT = buildNode("WriteOp", node_1);
						
					:} ;

separator_output_value ::=	SEPARATOR output_value:node_1 separator_output_value:node_2 {:
								ArrayList<VisitableNode<String>> result = new ArrayList<VisitableNode<String>>();
								result.add(node_1);
								if(node_2!=null)
									result.addAll(node_2);
								RESULT = result;
							:}
							|
							/* epsilon */
							;

output_value ::= expression:node {: RESULT = node; :} ;

structured_statement ::=	compound_statement:node {: RESULT = node; :}
							|
							if_statement:node {: RESULT = node; :}
							| 
							while_statement:node {: RESULT = node; :}
							;

if_statement ::=	IF expression:exp THEN statement:stmt {:
						RESULT = buildNode("IfThenOp", exp, stmt);
					:}
					|
					IF expression:exp THEN statement:stmt_1 ELSE statement:stmt_2 {:
						RESULT = buildNode("IfThenElseOp", exp, stmt_1, stmt_2);
					:} %prec ELSE
					;
					
while_statement ::=	WHILE expression:ptr DO statement:st_ptr {:
						RESULT = buildNode("WhileOp", ptr, st_ptr);
					:} ;

expression ::=	simple_expression:node {: RESULT = buildNode("SimpleExprOp", node); :}
				|
				simple_expression:node_1 RELATIONAL_OPERATOR:attr simple_expression:node_2 {:
					VisitableNode<String> relop = new VisitableNode<String>("RELATIONAL_OPERATOR", attr);
					RESULT = buildNode("RelationalOp", relop, node_1, node_2);
				:}
				;
				
simple_expression ::=	simple_expression:node_1 adding_operator:attr simple_expression:node_2 {:
							VisitableNode<String> add_op = new VisitableNode<String>("ADDING_OPERATOR", attr);
							RESULT = buildNode("AddOp", add_op, node_1, node_2);
						:}
						|
						simple_expression:node_1 MULTIPLYING_OPERATOR:attr simple_expression:node_2 {:
							VisitableNode<String> mul_op = new VisitableNode<String>("MULTIPLYING_OPERATOR", attr);
							RESULT = buildNode("MulOp", mul_op, node_1, node_2);
						:}
						|
						variable:var {: RESULT = buildNode("VarOp", new VisitableNode<String>("ID", var)); :}
						|
						constant:node {: RESULT = buildNode("ConstOp", node); :}
						|
						LPAR expression:exp RPAR {: RESULT = buildNode("ExprOp", exp); :}
						|
						NOT expression:exp {: RESULT = buildNode("NotOp", exp); :}
						|
						MINUS simple_expression:exp {: RESULT = buildNode("UnaryMinusOp", exp); :} %prec MINUS 
						;
						
adding_operator ::=	ADDING_OPERATOR:v {: RESULT = v; :}
					|
					MINUS:v {: RESULT = "-"; :}
					;
						
variable ::= variable_identifier:id {:RESULT = id;:};

variable_identifier ::= IDENTIFIER:id  {:RESULT = id;:};

constant ::= INTEGER_CONSTANT:c {: RESULT = buildNodeWithValue("INTEGER_CONSTANT", c);; :}
			 | 
			 STRING_CONSTANT:c  {: RESULT = buildNodeWithValue("STRING_CONSTANT", c);; :}
			 | 
			 CHARACTER_CONSTANT:c {: RESULT = buildNodeWithValue("CHARACTER_CONSTANT", c);; :}
			 | 
			 constant_identifier:c {: RESULT = buildNodeWithValue("BOOLEAN_CONSTANT", c); :} ;

constant_identifier ::=	TRUE {: RESULT = Wrapper.getClassName(sym.TRUE); :} 
						|
						FALSE {: RESULT = Wrapper.getClassName(sym.FALSE); :};
